// courses_fix.js (–≤–µ—Ä—Å–∏—è —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫ skill-level)
if (typeof window.culmsCourseFixInitialized === 'undefined') {
    window.culmsCourseFixInitialized = true;

    'use strict';
    let currentUrl = location.href;

    (async function() {
        const designData = await browser.storage.sync.get('oldCoursesDesignToggle');
        const useOldDesign = !!designData.oldCoursesDesignToggle;

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É.
 */
function main() {
   browser.storage.onChanged.addListener(async (changes) => {
        if (changes.oldCoursesDesignToggle) {
            window.location.reload();
            return;
        }
    })();

        // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫—É—Ä—Å—ã –∏ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (changes.archivedCourseIds || changes.themeEnabled) {
            console.log('Course Archiver: Storage changed, re-rendering.');
            try {
                // processCourses –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ ‚Äî –∂–¥—ë–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã
                await processCourses();
            } catch (e) {
                console.error('Error during processCourses after storage change', e);
            }
        }

        // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ (await –Ω–µ –Ω—É–∂–µ–Ω ‚Äî processCourses —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è)
        if (changes.themeEnabled) {
            const isDark = !!changes.themeEnabled.newValue;
            updateArchiveButtonColors(isDark);
        }

        // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ª–æ–≥ (—É–¥–∞–ª–∏ –µ—Å–ª–∏ —à—É–º–∏—Ç)
        console.log('storage.onChanged processed', changes);
});


    // --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É.
     */
    function main() {
        browser.storage.onChanged.addListener((changes) => {
            if (changes.oldCoursesDesignToggle) {
                window.location.reload();
                return;
            }

            if (changes.futureExamsViewToggle) {
                window.location.reload();
                return;
            }

            if (changes.archivedCourseIds || changes.themeEnabled) {
                window.cuLmsLog('Course Archiver: Storage changed, re-rendering.');
                const currentPath = window.location.pathname;
                const isOnArchivedPage = currentPath.includes('/courses/view/archived');
                browser.storage.sync.get('oldCoursesDesignToggle').then((designData) => {
                    const useOldDesign = !!designData.oldCoursesDesignToggle;
                    if (!isOnArchivedPage || !useOldDesign) {
                        processCourses();
                    }
                });
            }
        });

        const observer = new MutationObserver(() => {
        if (location.href !== currentUrl) {
            currentUrl = location.href;
            console.log('Course Archiver: URL changed, re-running logic.');
            processCourses();

            const currentPath = window.location.pathname;
            const isOnIndividualCoursePage = /\/view\/actual\/\d+/.test(currentPath);
            if (isOnIndividualCoursePage) {
                processFutureExams();
            }
        }
    });
    observer.observe(document.body, { subtree: true, childList: true });

    processCourses();
    const currentPath = window.location.pathname;
    const isOnIndividualCoursePage = /\/view\/actual\/\d+/.test(currentPath);
    if (isOnIndividualCoursePage) {
        processFutureExams();
    }
}

function updateArchiveButtonColors(isDarkTheme) {
    const color = isDarkTheme ? '#FFFFFF' : '#181a1c';
    document.querySelectorAll('.archive-button-container span').forEach(iconSpan => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º !important —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π inline !important
        iconSpan.style.setProperty('background-color', color, 'important');
    });
}
/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-—Ä–æ—É—Ç–µ—Ä. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–ª–∏.
 */
async function processCourses() {
    try {
        const courseList = await waitForElement('ul.course-list', 15000);
        const currentPath = window.location.pathname;
        const isOnArchivedPage = currentPath.includes('/courses/view/archived');

        if (isOnArchivedPage) {
            await renderArchivedPageFromScratch();
        } else {
            await updateExistingActiveCourses();
        }

            // –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É—Ä—Å–æ–≤, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–∫–æ–Ω–æ–∫
            restoreSkillLevelIconColors();
            const designData = await browser.storage.sync.get('oldCoursesDesignToggle');
            const useOldDesign = !!designData.oldCoursesDesignToggle;
            // –±–µ—Ä—É—Ç—Å—è –∏–∑ course_card_simplifier.js
            if (useOldDesign && typeof simplifyAllCourseCards === 'function') {
                simplifyAllCourseCards();
                observeCourseListChanges();
                courseList.classList.add('course-archiver-ready');
            }


        } catch (e) {
            window.cuLmsLog("Course Archiver: Not a course page, or content failed to load in time.", e);
        }
    }


    // --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏–∫–æ–Ω–æ–∫ ---

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∫–æ–Ω–∫–∏-–∑–≤—ë–∑–¥–æ—á–∫–∏, —á–∏—Ç–∞–µ—Ç –∏—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª—è
     * –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –µ–≥–æ –∑–∞–Ω–æ–≤–æ —Å '!important', —á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å —Å—Ç–∏–ª–∏ —Å–∞–π—Ç–∞.
     * check
     */
    function restoreSkillLevelIconColors() {
        const icons = document.querySelectorAll('.course-card .skill-level tui-icon');
        icons.forEach(icon => {
            // –ß–∏—Ç–∞–µ–º —Ü–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ style
            const originalColor = icon.style.color;

            // –ï—Å–ª–∏ —Ü–≤–µ—Ç –±—ã–ª –∑–∞–¥–∞–Ω (–Ω–µ –ø—É—Å—Ç–æ–π), –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ —Å !important
            if (originalColor) {
                icon.style.setProperty('color', originalColor, 'important');
            }
        });
    }

async function processFutureExams() {
    try {
      const futureExamsData = await browser.storage.sync.get('futureExamsViewToggle');
      const useFutureExams = !!futureExamsData.futureExamsViewToggle;
      if (useFutureExams && typeof viewFutureExams === 'function') {
          viewFutureExams();
      }
    } catch (e) {
        console.log("Something went wrong with future exams", e);
    }
}
const archiveButtonsObserver = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
        mutation.addedNodes.forEach(node => {
            if (node.nodeType !== 1) return;
            // –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–∫–∏ —Ü–µ–ª–∏–∫–æ–º
            if (node.matches && node.matches('.archive-button-container')) {
                // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                browser.storage.sync.get('themeEnabled').then(data => {
                    const isDark = !!data.themeEnabled;
                    node.querySelectorAll('span').forEach(span => {
                        span.style.setProperty('background-color', isDark ? '#FFFFFF' : '#181a1c', 'important');
                    });
                });
            } else {
                // –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –º–æ–≥–ª–∏ –±—ã—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                const found = node.querySelector && node.querySelectorAll && node.querySelectorAll('.archive-button-container span');
                if (found && found.length) {
                    browser.storage.sync.get('themeEnabled').then(data => {
                        const isDark = !!data.themeEnabled;
                        node.querySelectorAll('.archive-button-container span').forEach(span => {
                            span.style.setProperty('background-color', isDark ? '#FFFFFF' : '#181a1c', 'important');
                        });
                    });
                }
            }
        });
    });
});


archiveButtonsObserver.observe(document.body, { childList: true, subtree: true });

    async function updateExistingActiveCourses() {
        const allApiCourses = await fetchAllCoursesData();
        const storedArchivedCourseIds = await getArchivedCoursesFromStorage();
        const themeData = await browser.storage.sync.get('themeEnabled');
        const isDarkTheme = !!themeData.themeEnabled;

        const courseNameMap = new Map();
        allApiCourses.forEach(course => courseNameMap.set(course.name.trim(), course));

        function normalizeEmoji(str) {
            return str.replace(/üíô/g, 'üîµ').replace(/‚ù§Ô∏è/g, 'üî¥').replace(/üñ§/g, '‚ö´Ô∏è');
        }

        const courseCards = document.querySelectorAll('ul.course-list > li.course-card');
        courseCards.forEach(card => {
            const nameElement = card.querySelector('.course-name');
            if (!nameElement) return;

            const courseName = normalizeEmoji(nameElement.textContent.trim());
            const courseData = courseNameMap.get(courseName);

            if (!courseData) {
                window.cuLmsLog(`Course Archiver: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—É—Ä—Å–∞ "${courseName}"`);
                return;
            }

            const courseId = courseData.id;
            const isLocallyArchived = storedArchivedCourseIds.has(courseId);

            if (isLocallyArchived) {
                card.style.display = 'none';
            } else {
                card.style.display = '';
                addOrUpdateButton(card, courseId, isLocallyArchived, isDarkTheme);
            }
        });
    }

    async function renderArchivedPageFromScratch() {
        const courseListContainer = document.querySelector('ul.course-list');
        if (!courseListContainer) return;

        const storedArchivedCourseIds = await getArchivedCoursesFromStorage();
        const allApiCourses = await fetchAllCoursesData();
        const themeData = await browser.storage.sync.get('themeEnabled');
        const isDarkTheme = !!themeData.themeEnabled;

        const templateLi = document.querySelector('li.course-card');
        if (!templateLi) {
            window.cuLmsLog("Course Archiver: Template element for cloning not found.");
            return;
        }

        const coursesToDisplay = allApiCourses.filter(course => {
            const isLocallyArchived = storedArchivedCourseIds.has(course.id);
            const isApiArchived = course.isArchived;
            return isApiArchived || isLocallyArchived;
        });

        courseListContainer.innerHTML = '';

        coursesToDisplay.forEach(courseData => {
            const newLi = createCourseCardElement(courseData, templateLi);
            if (newLi) {
                courseListContainer.appendChild(newLi);
                addOrUpdateButton(newLi, courseData.id, storedArchivedCourseIds.has(courseData.id), isDarkTheme);
            }
        });
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

    async function fetchAllCoursesData() {
        try {
            const API_BASE_URL = 'https://my.centraluniversity.ru/api/micro-lms';
            const activeResponse = await fetch(`${API_BASE_URL}/courses/student?limit=10000&state=published`);
            const archivedResponse = await fetch(`${API_BASE_URL}/courses/student?limit=10000&state=archived`);
            if (!activeResponse.ok || !archivedResponse.ok) {
                throw new Error(`HTTP error! Statuses: ${activeResponse.status}, ${archivedResponse.status}`);
            }
            const activeCourses = (await activeResponse.json()).items;
            const archivedCourses = (await archivedResponse.json()).items;
            const allCoursesMap = new Map();
            activeCourses.forEach(course => allCoursesMap.set(course.id, course));
            archivedCourses.forEach(course => allCoursesMap.set(course.id, course));
            return Array.from(allCoursesMap.values());
        } catch (error) {
            window.cuLmsLog(`Course Archiver: Failed to fetch all courses:`, error);
            return [];
        }
    }

    async function getArchivedCoursesFromStorage() {
        try {
            const data = await browser.storage.local.get('archivedCourseIds');
            return new Set(data.archivedCourseIds || []);
        } catch (e) {
            window.cuLmsLog("Course Archiver: Error getting data from storage", e);
            return new Set();
        }
    }

    async function setArchivedCoursesInStorage(archivedCourseIds) {
        try {
            await browser.storage.local.set({ archivedCourseIds: Array.from(archivedCourseIds) });
        } catch (e) {
            window.cuLmsLog("Course Archiver: Error saving data to storage", e);
        }
    }


    // --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DOM (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

    function createCourseCardElement(courseData, templateLi) {
        const newLi = templateLi.cloneNode(true);
        newLi.style.display = '';
        newLi.setAttribute('data-course-id', courseData.id);
        const title = newLi.querySelector('.course-name');
        if (title) {
            title.textContent = escapeHtml(courseData.name);
        }
        const linkComponent = newLi.querySelector('cu-course-card');
        if (linkComponent) {
            const originalLink = linkComponent.querySelector('a');
            if(originalLink) originalLink.remove();
            linkComponent.onclick = () => {
                window.location.href = `/learn/courses/view/actual/${courseData.id}`;
            };
            linkComponent.style.cursor = 'pointer';
        }
        return newLi;
    }

    function addOrUpdateButton(li, courseId, isLocallyArchived, isDarkTheme) {
        const imageAreaContainer = li.querySelector('div.course-card');
        if (!imageAreaContainer) return;
        imageAreaContainer.style.position = 'relative';
        let buttonContainer = li.querySelector('.archive-button-container');
        if (!buttonContainer) {
            buttonContainer = document.createElement('div');
            buttonContainer.className = 'archive-button-container';
            imageAreaContainer.appendChild(buttonContainer);
        }
        buttonContainer.style.cssText = `position: absolute; right: 8px; bottom: 4px; z-index: 10;`;
        buttonContainer.innerHTML = '';
        const archiveButton = document.createElement('button');
        archiveButton.style.cssText = `background: none; border: none; padding: 0; cursor: pointer; line-height: 0;`;
        const iconSpan = document.createElement('span');
        const iconUrl = isLocallyArchived
            ? browser.runtime.getURL('icons/unarchive.svg')
            : browser.runtime.getURL('icons/archive.svg');
        const iconColor = isDarkTheme ? '#FFFFFF' : '#181a1c';
        iconSpan.style.cssText = `
            display: inline-block;
            width: 24px;
            height: 24px;
            mask-image: url(${iconUrl});
            -webkit-mask-image: url(${iconUrl});
            mask-size: contain;
            -webkit-mask-size: contain;
            mask-repeat: no-repeat;
            background-color: ${iconColor} !important;
        `;
        archiveButton.appendChild(iconSpan);
        buttonContainer.appendChild(archiveButton);
        archiveButton.addEventListener('click', async (event) => {
            event.preventDefault();
            event.stopPropagation();
            const currentArchivedCourseIds = await getArchivedCoursesFromStorage();
            if (currentArchivedCourseIds.has(courseId)) {
                currentArchivedCourseIds.delete(courseId);
            } else {
                currentArchivedCourseIds.add(courseId);
            }
            await setArchivedCoursesInStorage(currentArchivedCourseIds);

            const designData = await browser.storage.sync.get('oldCoursesDesignToggle');
            const useOldDesign = !!designData.oldCoursesDesignToggle;

            if (useOldDesign) {
                const isNowArchived = currentArchivedCourseIds.has(courseId);
                const currentPath = window.location.pathname;
                const isOnArchivedPage = currentPath.includes('/courses/view/archived');

                // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π li —ç–ª–µ–º–µ–Ω—Ç
                const cardLi = li.closest('li.course-card');

                if (!isOnArchivedPage && isNowArchived) {
                    // –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if (cardLi) cardLi.style.display = 'none';
                } else if (isOnArchivedPage && !isNowArchived) {
                    // –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—Ä—Ö–∏–≤–∞: —Å–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                    if (cardLi) cardLi.style.display = 'none';
                }
            }
        });
    }


    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

    function waitForElement(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const element = document.querySelector(selector);
            if (element) return resolve(element);
            const observer = new MutationObserver(() => {
                const foundElement = document.querySelector(selector);
                if (foundElement) {
                    observer.disconnect();
                    resolve(foundElement);
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });
            setTimeout(() => {
                observer.disconnect();
                reject(new Error(`Element ${selector} not found within ${timeout}ms`));
            }, timeout);
        });
    }

    function escapeHtml(text) {
        const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
        return String(text).replace(/[&<>"']/g, m => map[m]);
    }
}